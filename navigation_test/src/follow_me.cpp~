#include<ros/ros.h>
#include<iostream>
#include<std_msgs/String.h>
//navigation中需要使用的位姿信息头文件
#include<geometry_msgs/Pose.h>
#include<geometry_msgs/Point.h>
#include<geometry_msgs/PoseWithCovarianceStamped.h>
#include<geometry_msgs/Twist.h>
#include<geometry_msgs/Quaternion.h>
#include <kobuki_msgs/DigitalInputEvent.h>
#include <kobuki_msgs/ButtonEvent.h>
//move_base头文件
#include<move_base_msgs/MoveBaseGoal.h>
#include<move_base_msgs/MoveBaseAction.h>
//actionlib头文件
#include<actionlib/client/simple_action_client.h>
#include <stdlib.h>
using namespace std;
ros::Subscriber Followme;
void followcallback(const std_msgs::String::ConstPtr& msg)
{
    	ROS_INFO("enter follow"); 
    	if(msg->data== "follow_start")
    	{
		ROS_INFO("receive start message"); 
        	system("/home/zjs/2017_ap/src/navigation_test/follow_start.sh");
	 }
	if(msg->data== "follow_stop")
	{
		ROS_INFO("receive stop message"); 
		system("rosnode kill /turtlebot_follower");
	}
}
int main(int argc, char** argv)
{
     
    ros::init(argc, argv, "follow_me");
    ros::NodeHandle n;
    //Followme=n.subscribe("ifFollowme", 1, followcallback);
    
   ros::Rate loopRate(10);//ros::Rate对象可以允许你指定自循环的频率     
  //while (ros::ok())  
  //{    
	ROS_INFO("enter main"); 
     Followme = n.subscribe("ifFollowme", 1, followcallback);
  //}  
    ros::spin();
    return 0;
}


